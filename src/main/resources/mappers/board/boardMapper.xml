<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">        <!-- MyBatis의 경우 작성된 XML Mapper는 상단의 파일에서 사용하는 태그들에 대한 정보가 기록된 DTD를 추가 -->

<mapper namespace="board">


    <update id="addReadCount">
		UPDATE
			tbl_blockReadCount
		SET
			blrc_count = blrc_count + 1
		WHERE
			blrc_ref = #{bl_uid}
	</update>


    <resultMap id="boardMap" type="HashMap">
		<result property="bl_uid" column="bl_uid"/>
        <result property="bl_writer" column="bl_writer"/>
        <result property="bl_title" column="bl_title"/>
        <result property="bl_description" column="bl_description" jdbcType="CLOB" javaType="java.lang.String"/>
        <result property="bl_introduce" column="bl_introduce"/>
        <result property="bti_url" column="bti_url"/>
        <result property="bl_mainCtg" column="bl_mainCtg"/>
        <result property="bl_smCtg" column="bl_smCtg"/>
        <result property="bl_date" column="bl_date" javaType="java.lang.Long"/>
        <result property="bl_objId" column="bl_objId"/>
        <result property="blrc_count" column="blrc_count" javaType="java.lang.Long"/>


    </resultMap>

	<resultMap id="blockInfo" type="HashMap">
		<result property="bl_title" column="bl_title"/>
		<result property="bl_mainCtg" column="bl_mainCtg"/>
		<result property="bl_smCtg" column="bl_smCtg"/>
		<result property="bl_date" column="bl_date" javaType="java.lang.Long"/>
		<result property="bl_uid" column="bl_uid"/>
		<result property="MEM_NICK" column="MEM_NICK"/>
	</resultMap>

    <resultMap id="infoMap" type="HashMap">
        <result property="MEM_NICK" column="MEM_NICK"/>
        <result property="MEM_LEVEL" column="MEM_LEVEL"/>
        <result property="MEM_PROFILE" column="MEM_PROFILE"/>
        <result property="BTI_URL" column="BTI_URL"/>
        <result property="BL_LIKE" column="BL_LIKE"/>
    </resultMap>

    <select id="getBoardDetailBlock" resultType="Map" resultMap="boardMap">
      SELECT
         B.bl_uid AS "bl_uid", B.bl_writer AS "bl_writer", B.bl_title AS "bl_title", B.bl_description AS "bl_description",
            B.bl_introduce AS "bl_introduce",
            						(SELECT
                                           mctg_name
                                    FROM
                                       tbl_mcategory
                                    WHERE
                                       mctg_uid = (SELECT
                                                   bl_mainCtg
                                                FROM
                                                   tbl_block
                                                WHERE bl_uid = #{bl_uid})) AS "bl_mainCtg",
                                    (SELECT
                                       sctg_name
                                    FROM
                                       tbl_scategory
                                    WHERE
                                       sctg_uid = (SELECT
                                                   bl_smctg
                                                FROM
                                                   tbl_block
                                                WHERE bl_uid = #{bl_uid})) AS "bl_smCtg",
         B.bl_date AS "bl_date", B.bl_objId AS "bl_objId", I.bti_url AS "bti_url", R.blrc_count AS "blrc_count", M.mem_nick AS "mem_nick", M.mem_introduce AS "mem_introduce", M.mem_profile AS "mem_profile"
      FROM
         tbl_block B
         INNER JOIN
            tbl_thumbImg I
         ON
            I.bti_ref = B.bl_uid
         INNER JOIN
            tbl_blockReadCount R
         ON
            R.blrc_ref = B.bl_uid
         INNER JOIN
            tbl_memInfo M
         ON
            M.mem_iuid = B.bl_writer
      WHERE
         B.bl_uid = #{bl_uid} AND R.blrc_ref = #{bl_uid} AND M.mem_iuid = B.bl_writer
   </select>

    <select id="getBoardDetailTags" resultType="String">
		SELECT
			bt_name
		FROM
			tbl_blockTags
		WHERE
			bt_ref = #{bl_uid}
	</select>

    <insert id="writeViewBlock">
		INSERT INTO
    		tbl_block
				(bl_uid, bl_writer, bl_title, bl_introduce, bl_description, bl_mainCtg, bl_smCtg, bl_date, bl_objId)
		VALUES
				(#{bl_uid}, #{bl_writer}, #{bl_title}, #{bl_introduce}, #{bl_description}, #{bl_mainCtg}, #{bl_smCtg}, #{bl_date}, #{bl_objId})
	</insert>

    <insert id="writeViewThumbImg">
		INSERT INTO
			tbl_thumbImg
				(bti_ref, bti_url)
		VALUES
				(#{bl_uid}, #{uploadName})
	</insert>

    <insert id="writeViewTag">
		INSERT INTO
			tbl_blockTags
				(bt_ref, bt_name)
		VALUES
				(#{bl_uid}, #{tag})
	</insert>
    <!-- 조회수 테이블 초기화 -->
    <insert id="writeViewReadCount">
		INSERT INTO
			tbl_blockReadCount
				(blrc_ref)
		VALUES
				(#{bl_uid})
	</insert>

    <!-- 좋아요 체크 -->
    <select id="likeCheck" resultType="String">
		SELECT
			blk_member
		from
			tbl_blocklikes
		where
			blk_ref = #{bl_iuid} and blk_member = #{session_mem_iuid}

	</select>

    <!-- 좋아요 증가 -->
    <insert id="addLike">
		INSERT INTO
			tbl_blockLikes
				(blk_ref ,blk_member)
        VALUES
				(#{bl_iuid},#{session_mem_iuid})
	</insert>

    <!-- 좋아요 취소 -->
    <delete id="cancelLike">
        DELETE FROM
            tbl_blockLikes
        WHERE
            blk_ref = #{bl_iuid} and blk_member = #{session_mem_iuid}
    </delete>

	<resultMap id="getModifyBlockMap" type="HashMap">
		<result property="bl_uid" column="bl_uid"/>
		<result property="bl_writer" column="bl_writer"/>
		<result property="bl_title" column="bl_title"/>
		<result property="bl_description" column="bl_description" jdbcType="CLOB" javaType="java.lang.String"/>
		<result property="bl_introduce" column="bl_introduce"/>
		<result property="bl_mainCtg" column="bl_mainCtg"/>
		<result property="bl_smCtg" column="bl_smCtg"/>
		<result property="bl_date" column="bl_date" javaType="java.lang.Long"/>
		<result property="bl_objId" column="bl_objId"/>
		<result property="bti_url" column="bti_url"/>
	</resultMap>

    <select id="getModifyBlock" resultMap="getModifyBlockMap">
		SELECT
			B.bl_uid AS "bl_uid", B.bl_writer AS "bl_writer", B.bl_title AS "bl_title", B.bl_description AS "bl_description",  B.bl_introduce AS "bl_introduce", (SELECT
																																				   mctg_name
																																			FROM
																																			   tbl_mcategory
																																			WHERE
																																			   mctg_uid = (SELECT
																																						   bl_mainCtg
																																						FROM
																																						   tbl_block
																																						WHERE bl_uid = #{bl_uid})) AS "bl_mainCtg",
																																			(SELECT
																																			   sctg_name
																																			FROM
																																			   tbl_scategory
																																			WHERE
																																			   sctg_uid = (SELECT
																																						   bl_smctg
																																						FROM
																																						   tbl_block
																																						WHERE bl_uid = #{bl_uid})) AS "bl_smCtg",
                                                 B.bl_objId AS "bl_objId", I.bti_url AS "bti_url"
		FROM
			tbl_block B
			INNER JOIN
				tbl_thumbImg I
			ON
				I.bti_ref = B.bl_uid
		WHERE
			B.bl_uid = #{bl_uid}
	</select>

    <select id="getUploadName" resultType="String">
		SELECT
			bti_url
		FROM
			tbl_thumbImg
		WHERE
			bti_ref = #{bl_uid}
	</select>

    <update id="modifyViewBoard">
		UPDATE
			tbl_block
		SET
			bl_title = #{bl_title}, bl_description = #{bl_description}, bl_mainCtg = #{bl_mainCtg}, bl_smCtg = #{bl_smCtg}, bl_date = #{bl_date}
		WHERE
			bl_uid = #{bl_uid}
	</update>

    <update id="modifyViewThumbImg">
		UPDATE
			tbl_thumbImg
		SET
			bti_url = #{uploadName}
		WHERE
			bti_ref = #{bl_uid}
	</update>

    <update id="modifyViewTag">
		UPDATE
			tbl_blockTags
		SET
			bt_name = #{tag}
		WHERE
			bt_ref = #{bl_uid}
	</update>

    <select id="checkBmksPath" resultType="String">
		SELECT
			bp_path
		FROM
			tbl_blpath
		WHERE
			bp_iuid = #{session_iuid}
	</select>

    <insert id="insertBmksPath">
		INSERT INTO
			tbl_blpath
			(bp_iuid, bp_path, bp_date, bp_browstype, bp_booktype)
		VALUES
			(#{session_iuid}, #{blockPathDTO.bp_path}, sysdate, #{blockPathDTO.bp_browstype}, #{blockPathDTO.bp_booktype})
	</insert>

    <update id="updateBmksPath">
		UPDATE
			tbl_blpath
		SET
			bp_path = #{blockPathDTO.bp_path}, bp_date = sysdate, bp_browstype = #{blockPathDTO.bp_browstype}, bp_booktype = #{blockPathDTO.bp_booktype}
		WHERE
			bp_iuid = #{session_iuid}
	</update>

    <select id="getBookMarkFromHTML" resultType="String">
		SELECT
			bp_path
		FROM
			tbl_blpath
		WHERE
			bp_iuid = #{session_iuid}
	</select>

    <delete id="deleteBlock">
		DELETE FROM
			tbl_block
		WHERE
			bl_uid = #{bl_uid}
	</delete>

    <select id="mCtgAllUids" resultType="String">
		SELECT
			mctg_uid
		FROM
			tbl_mCategory
	</select>

    <select id="mCtgAllNames" resultType="String">
		SELECT
			mctg_name
		FROM
			tbl_mCategory
		WHERE
			mctg_uid = #{uid}
	</select>

    <select id="sCtgAllNames" resultType="String">
		SELECT
			sctg_name
		FROM
			tbl_sCategory
		WHERE
			sctg_ref = #{uid}
	</select>

    <select id="sctgUID" resultType="String">
		SELECT
			SCTG_UID
		FROM
		    tbl_SCATEGORY
		WHERE
		    SCTG_NAME = #{bl_smCtg}
	</select>

    <select id="searchTitle" resultType="hi.im.jenga.board.dto.BoardDTO" parameterType="java.util.Map">
		SELECT
			*
		FROM
			(SELECT
				rownum rnum, bl_uid, BL_WRITER, BL_TITLE, BL_DESCRIPTION, BL_MAINCTG, BL_SMCTG, BL_DATE, BL_OBJID, BL_INTRODUCE
			 FROM
				(SELECT
					*
				 FROM
					tbl_block
				 WHERE
					<foreach collection="search" item="search" separator="or">
						bl_title LIKE '%'||#{search}||'%'
					</foreach>
				 ORDER BY
					bl_date DESC))
		WHERE
			rnum >= #{startrow} AND rnum <![CDATA[ <= #{endrow} ]]>
    </select>

	<select id="countSearchTitle" resultType="int" parameterType="java.util.List">
		SELECT
			count(*)
		FROM
			tbl_block
		WHERE
		<foreach collection="list" item="search" separator="or">
			bl_title LIKE '%'||#{search}||'%'
		</foreach>
	</select>


    <select id="mctgUID" resultType="String">
		SELECT
			MCTG_UID
		FROM
		    tbl_MCATEGORY
		WHERE
		    MCTG_NAME = #{bl_smCtg}
	</select>

    <select id="searchName" resultType="hi.im.jenga.board.dto.BoardDTO" parameterType="java.util.HashMap">

		SELECT
			*
		FROM
			(SELECT
				rownum rnum, bl_uid, BL_WRITER, BL_TITLE, BL_DESCRIPTION, BL_MAINCTG, BL_SMCTG, BL_DATE, BL_OBJID, BL_INTRODUCE
		    FROM
				(SELECT
				  	*
				FROM
					tbl_block
				WHERE
					BL_WRITER = (SELECT
									MEM_IUID
								FROM
									TBL_MEMINFO
								WHERE
									MEM_NICK LIKE '%'||#{search}||'%'
								)
				ORDER BY BL_DATE DESC))
		WHERE
			rnum >= #{startrow} AND rnum <![CDATA[ <= #{endrow} ]]>

	</select>

	<select id="countSearchName" resultType="int">
		SELECT
			count(*)
		FROM
			tbl_block
		WHERE
			BL_WRITER = (SELECT
								MEM_IUID
							FROM
								TBL_MEMINFO
							WHERE
								MEM_NICK LIKE '%'||#{search}||'%'
							)
	</select>

    <select id="searchTag" resultType="hi.im.jenga.board.dto.BoardDTO">

		SELECT
			*
		FROM
			(SELECT
				rownum rnum,bl_uid, BL_WRITER, BL_TITLE, BL_DESCRIPTION, BL_MAINCTG, BL_SMCTG, BL_DATE, BL_OBJID, BL_INTRODUCE
			FROM
				(SELECT DISTINCT
					*
				FROM
					tbl_block b
						INNER JOIN
							tbl_blocktags bt
						ON
							b.bl_uid = bt.bt_ref
				WHERE
					bt.BT_NAME = #{search}
				ORDER BY BL_DATE DESC))
		WHERE
			rnum >= #{startrow} AND rnum <![CDATA[ <= #{endrow} ]]>

	</select>

	<select id="countSearchTag" resultType="int">
		SELECT DISTINCT
		 	count(*)
		FROM
		 	tbl_block b
		 	 	INNER JOIN
		 	 	 	tbl_blocktags bt
		 	 	ON
		 	 	 	b.bl_uid = bt.bt_ref
        WHERE
         	bt.BT_NAME = #{search}
	</select>

    <insert id="setSearchKeyword">
		INSERT INTO
			 tbl_keyword
		VALUES
		     (#{search},#{session_iuid},systimestamp)
	</insert>

    <insert id="follow">
		INSERT INTO
			tbl_follow
		VALUES
		 	(#{bl_writer}, #{session_iuid})
	</insert>

    <select id="followCheck" resultType="String">
		SELECT
			*
		FROM
			TBL_FOLLOW
		WHERE
			FL_IUID = #{bl_writer} AND fl_follower = #{session_iuid}
	</select>

    <delete id="unFollow">
		DELETE FROM
			tbl_follow
		WHERE
			FL_IUID = #{bl_writer} AND FL_FOLLOWER = #{session_iuid}
	</delete>

	<!-- 팔로워의 글 뽑기 -->
    <select id="getFollowerBoard" resultType="Map">
			SELECT
				b.bl_title AS "bl_title", b.bl_introduce AS "bl_introduce", b.bl_uid AS "bl_uid"
							 , (SELECT
								mctg_name
								FROM
								tbl_mcategory
								WHERE
								mctg_uid = (SELECT
												bl_mainctg
											FROM
												tbl_block
											WHERE
												bl_uid = b.bl_uid)) AS "bl_mainctg",
								(SELECT
								sctg_name
								FROM
								tbl_scategory
								WHERE
								sctg_uid = (SELECT
												bl_smctg
											FROM
												tbl_block
											WHERE
												bl_uid = b.bl_uid)) AS "bl_smctg",
							 th.bti_url AS "bti_uri", b.bl_date AS "bl_date"
			FROM
			 	tbl_block b
					INNER JOIN
					tbl_thumbimg th
					ON
					th.bti_ref = b.bl_uid
			WHERE
			 	bl_writer = (SELECT
			 		 			fl_iuid
			 		 		 FROM
			 		 		  	tbl_follow
			 		 		 WHERE
			 		 		 	fl_iuid = #{follow_iuid} AND fl_follower = #{my_iuid})
			ORDER BY BL_DATE DESC
	</select>

    <!-- 좋아요 갯수 -->
    <select id="likeCount" resultType="int">
		SELECT
			COUNT(*)
		FROM
			tbl_blockLikes
		WHERE
			 blk_ref = #{bl_iuid}
	</select>


    <!-- 내 블록 가져오기-->
    <select id="getMyBlock" resultType="HashMap">
		SELECT
		 	b.bl_uid AS "bl_uid", b.bl_writer AS "bl_writer", bti.bti_url AS "bti_url", b.bl_title AS "bl_title", (SELECT
		 																										  		count(blk_member)
																													FROM
																														tbl_blocklikes
																													WHERE
																														blk_ref = bl_uid) AS "likes"
		FROM
			tbl_block b
		INNER JOIN
			tbl_thumbimg bti
		ON
			bti_ref = bl_uid
		WHERE
			bl_writer = #{my_iuid}
		ORDER BY
			BL_DATE DESC
	</select>

    <!-- 인기 블록 뽑기 -->
    <select id="getPopularBlock" resultType="Map">
		SELECT
		 	 b.bl_title AS "bl_title", b.bl_introduce AS "bl_introduce", b.bl_uid AS "bl_uid"
		 	 , (SELECT
				mctg_name
				FROM
				tbl_mcategory
				WHERE
				mctg_uid = (SELECT
								bl_mainctg
							FROM
								tbl_block
							WHERE
								bl_uid = b.bl_uid)) AS "bl_mainctg",
				(SELECT
				sctg_name
				FROM
				tbl_scategory
				WHERE
				sctg_uid = (SELECT
								bl_smctg
							FROM
								tbl_block
							WHERE
								bl_uid = b.bl_uid)) AS "bl_smctg",
			 th.bti_url AS "bti_uri", b.bl_date AS "bl_date", bl.bl_like AS "bl_like", rc.blrc_count AS "blrc_count", mi.mem_profile AS "mem_profile", mi.mem_nick AS "mem_nick"
		FROM
			 tbl_block b
		INNER JOIN
		 	 (SELECT
		 	  		BLK_REF, count(*) bl_like
		 	  FROM
		 	   		tbl_blocklikes
		 	  GROUP BY
		 	  		(blk_ref)
		 	  HAVING
		 	   		count(*) >= #{likeCount}) bl
		ON
			b.BL_UID = bl.blk_REF
		INNER JOIN
				tbl_THUMBIMG th
		ON
				b.BL_UID = th.bti_ref
		INNER JOIN
				tbl_blockreadcount rc
		ON
				b.BL_UID = rc.BLRC_REF
		INNER JOIN
				tbl_meminfo mi
		ON
				b.BL_WRITER = mi.MEM_IUID
	</select>


    <!-- 내가 좋아요한 board 뽑기 -->
    <select id="myLikesBlock" resultType="HashMap" resultMap="blockInfo">
		SELECT
		 		b.BL_DATE, b.BL_INTRODUCE, b.BL_MAINCTG, b.BL_OBJID, b.BL_SMCTG, b.BL_TITLE, b.BL_UID, b.BL_WRITER, m.MEM_NICK
		FROM
		 		tbl_blocklikes bl
			INNER JOIN
					tbl_block b
			ON
					bl.BLK_REF = b.bl_uid
			INNER JOIN
					tbl_meminfo m
			ON
					b.BL_WRITER = m.MEM_IUID
		WHERE
		 	bl.blk_member = #{my_iuid}
		ORDER BY
		 	b.bl_date DESC

	</select>

    <select id="searchImgTitle" resultType="Map" resultMap="infoMap" parameterType="java.util.List">
		SELECT
			*
		FROM
			(SELECT
				rownum rnum,MEM_NICK,MEM_LEVEL,MEM_PROFILE, BTI_URL,NVL(bl_like,0) AS bl_like
			FROM
				(SELECT
					*
				FROM
					tbl_block b
						INNER JOIN
							tbl_thumbimg t
						ON
							b.bl_uid = t.bti_ref
						INNER JOIN
							TBL_MEMINFO m
						ON
							b.BL_WRITER = m.MEM_IUID
						LEFT OUTER JOIN
							(SELECT
								blk_ref, COUNT(*) bl_like
							FROM
								tbl_blockLikes
									GROUP BY blk_ref) bl
							ON
								b.bl_uid = bl.blk_ref
							WHERE
								<foreach collection="list" item="search" separator="or">
								bl_title like '%'||#{search}||'%'
								</foreach>
							ORDER BY b.BL_DATE DESC))
		WHERE
			rnum >= #{startrow} AND rnum <![CDATA[ <= #{endrow} ]]>
	</select>

    <select id="searchImgName" resultType="Map" resultMap="infoMap">
		SELECT
			*
		FROM
			(SELECT
				rownum rnum,MEM_NICK,MEM_LEVEL,MEM_PROFILE, BTI_URL,NVL(bl_like,0) AS bl_like, bl_date
			FROM
				(SELECT
					*
				FROM
					tbl_block b
						INNER JOIN
							tbl_thumbimg t
						ON
							b.bl_uid = t.bti_ref
								INNER JOIN
									tbl_meminfo m
								ON
									b.BL_WRITER = m.MEM_IUID
										LEFT OUTER JOIN
											(SELECT
												blk_ref, COUNT(*) bl_like
											FROM
												tbl_blockLikes GROUP BY blk_ref) bl
											ON
												b.bl_uid = bl.blk_ref
											WHERE
												b.bl_writer =  (SELECT
																	mem_iuid
															    FROM
																	tbl_meminfo
																WHERE
																	mem_nick = #{search})
																ORDER BY BL_DATE DESC))
		WHERE
		    rnum >= #{startrow} AND rnum <![CDATA[ <= #{endrow} ]]>
	</select>

    <select id="searchImgTag" resultType="Map" resultMap="infoMap">

		SELECT
			*
		FROM
			(SELECT
				rownum rnum, MEM_NICK,MEM_LEVEL,MEM_PROFILE, BTI_URL,NVL(bl_like,0) AS bl_like,bl_date
			FROM
				(SELECT DISTINCT
					m.MEM_NICK,m.MEM_LEVEL,m.MEM_PROFILE,t.BTI_URL,b.BL_DATE,bl.bl_like
				FROM
					tbl_block b
						INNER JOIN
							tbl_thumbimg t
						ON
							b.bl_uid = t.bti_ref
								INNER JOIN
									TBL_BLOCKTAGS bt
								ON
									b.bl_uid = bt.bt_ref
											INNER JOIN
												TBL_MEMINFO m
											ON
												b.BL_WRITER = m.MEM_IUID
													LEFT OUTER JOIN
														(SELECT DISTINCT
														 		blk_ref, count(*) bl_like
														FROM
																tbl_blockLikes GROUP BY blk_ref) bl
												  	ON b.bl_uid = bl.blk_ref
				WHERE
					bt.BT_NAME = #{search} ORDER BY bl_date DESC))
		WHERE
		 	rnum >= #{startrow} AND rnum <![CDATA[ <= #{endrow} ]]>
	</select>

	<select id="followRecommend" resultType="Map">
		SELECT
		 	m.mem_iuid,m.mem_nick,m.mem_profile,m.mem_level
		FROM(
			SELECT
			 	bl_writer, count(*)
			FROM(
				SELECT
				 	*
				FROM(
					SELECT
					 	bl_mainctg,MAX(count) AS maximum
					FROM(
						SELECT
						 	bl_mainctg, bl_writer, count(*) count
						FROM
						 	tbl_block board, TBL_MFAVOR favor
  						WHERE
  						 	board.bl_mainctg = favor.mf_type
  						 	AND
  						 	 	favor.mf_ref = #{my_iuid}
  						 	AND
  						 	 	BL_WRITER NOT IN(SELECT
  						 	 	 					fl_iuid
  						 	 	 				 FROM
  						 	 	 				  	tbl_follow
  						 	 	 				 WHERE
  						 	 	 				  	fl_follower = #{my_iuid})
  						 	  GROUP BY
  						 	   	  bl_mainctg, bl_writer)
  				  GROUP BY
  				   		bl_mainctg) a
  				  INNER JOIN (
  			   				  SELECT
  			   				    	bl_mainctg, bl_writer, count(*) count
	  						  FROM
  							   		tbl_block board, TBL_MFAVOR favor
		  					  WHERE
  	  						   		board.bl_mainctg = favor.mf_type
  	  						   		AND
  	  						   		 	favor.mf_ref = #{my_iuid}
  	  						   		AND
  						 	 			BL_WRITER NOT IN(SELECT
  						 	 	 							fl_iuid
  						 	 	 						 FROM
  						 	 	 						  	tbl_follow
  						 	 	 						 WHERE
  						 	 	 						  	fl_follower = #{my_iuid})
  							  GROUP BY
  	  						  		bl_mainctg, bl_writer) b
  	    		  ON
  						 	a.maximum = b.count AND a.bl_mainctg = b.bl_mainctg)
  			GROUP BY
  					bl_writer
  			ORDER BY
  			 		count) res
  		INNER JOIN
  		 	tbl_meminfo m
 		ON
 		 	res.bl_writer = m.MEM_IUID
 		WHERE
 		 	m.MEM_IUID NOT IN #{my_iuid}
	</select>



</mapper>














