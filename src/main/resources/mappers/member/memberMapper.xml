<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">		<!-- MyBatis의 경우 작성된 XML Mapper는 상단의 파일에서 사용하는 태그들에 대한 정보가 기록된 DTD를 추가 -->

<mapper namespace="member">


	<update id="addEmailMemInfo">
	UPDATE
		tbl_MemInfo
	SET
		mem_nick = #{mem_nick}, mem_profile = #{mem_profile}, mem_joinDate = sysdate, mem_introduce = #{mem_introduce}
	WHERE
		mem_iuid = #{mem_iuid}
	</update>

	<insert id="addSocialMemInfo">
	INSERT INTO
		tbl_MemInfo
		(mem_iuid, mem_nick, mem_profile, mem_joinDate, mem_introduce)
	VALUES
		(#{mem_iuid}, #{mem_nick}, #{mem_profile}, sysdate, #{mem_introduce})
	</insert>

	<insert id="addEmailMember">
	UPDATE
		tbl_EMember
	SET
		em_acheck = 'Y', em_adate = sysdate
	WHERE em_ref = #{aes_iuid}
	</insert>

	<insert id="addSocialMember">
	INSERT INTO
		tbl_SMember
		(sm_id, sm_ref, sm_type)
	VALUES (#{socialMemberDTO.sm_id}, #{memberUid}, #{socialMemberDTO.sm_type})
	</insert>

	<!-- SELECT sm_id FROM tbl_SMember WHERE sm_id = #{aes_sid}-->
	<select id="getExistMember" resultType="MemberDTO">
	SELECT
		*
	FROM
		TBL_MEMINFO
	WHERE MEM_IUID = (SELECT
	 				  		SM_REF
					  FROM
					  		TBL_SMEMBER
					  WHERE SM_ID = #{aes_sid})
	</select>

	<!-- 이메일 회원가입 할 때 입력된 이메일을 암호화 한 후 EMember에 존재하는지 여부를 ‘Y’, ‘N’, null 로 알려줌 -->
	<select id="isEMExist" resultType="String">
	SELECT
		em_acheck
	FROM
		tbl_EMember
	WHERE
		em_id = #{aes_eid}
	</select>

	<update id="findEPwd">
	UPDATE
		tbl_EMember
	SET
		em_pwd = #{sha_key}
	WHERE em_id = #{aes_find_pwd}
	</update>

	<update id="findAPwd" parameterType="HashMap">
 	UPDATE
		tbl_AMember
	SET
		am_pwd = #{tempPwdKey}
	WHERE am_id = #{find_pwd}
	</update>

	<!-- 이메일 회원가입할 때 인증키 보낼 때 tbl_memInfo에 임시로 넣어주는 메서드 -->
	<insert id="setTempMemInfo">
	INSERT INTO
		tbl_MemInfo
	(mem_iuid, mem_nick, mem_profile,  mem_joindate, mem_introduce)
	VALUES (#{em_ref},'temp', 'temp', sysdate, 'temp')
	</insert>


	<insert id="sendKey">

	<![CDATA[
	merge into tbl_emember a
	using dual
	on (em_id = #{em_id})
	when matched then update set em_akey= #{em_akey}
	when not matched then insert values (#{em_id}, #{em_ref}, #{em_pwd}, #{em_akey}, 'N', sysdate)
	]]>
	</insert>

	<!-- 해당 이메일에 보낸 인증키가 일치하는지 확인하는지 -->
	<update id="authTokenUpdate">
	update
	tbl_emember
	set
	em_acheck = 'Y'
	where em_id = #{em_id} and em_akey = #{em_akey}
	</update>

	<!-- 멤버 지움 -->
	<delete id="delMemInfo">
	DELETE FROM tbl_MemInfo
	WHERE mem_iuid = #{session_mem_iuid}
	</delete>

	<!-- 멤버 정보 수정-->
	<update id="updMemInfo">
	UPDATE
		tbl_MemInfo
	SET
		mem_nick = ${mem_nick}, mem_profile = #{mem_profile}, mem_introduce = #{mem_introduce}
	WHERE
		mem_iuid = #{mem_iuid};
	</update>

	<select id="checkid" resultType="java.lang.Integer">
	SELECT
		count(*)
	FROM
	    tbl_EMember
	where
	    EM_ID = #{em_id}
	</select>

	<select id="checkpass" resultType="java.lang.Integer">
	SELECT
		count(*)
	FROM
	    tbl_EMember
	WHERE
	    EM_ID = #{em_id} AND EM_PWD = #{em_pwd}
	</select>

	<select id="checkauth" resultType="String">
	SELECT
	    em_acheck
	from
	    tbl_emember
	where
	    em_id = #{em_id} and em_pwd = #{em_pwd}
	</select>

	<select id="getMemInfo" resultType="MemberDTO">
	SELECT
		  *
	FROM
		  tbl_MemInfo
	WHERE
		  mem_iuid = (SELECT
		                    EM_REF
		  			  FROM
		  			        tbl_EMember
		  			  where
		  			        em_id = #{em_id}
		             )

	</select>

	<!-- 이메일을 이용해서 임시로 넣은 iuid를 찾기위한 메서드 -->
	<select id="findMemUidByEmail" resultType="String">
	SELECT
		em_ref
	FROM
		tbl_EMember
	WHERE em_id = #{em_id}
	</select>


	<insert id="addMemberFavor">
	INSERT INTO
		tbl_mFavor
	VALUES
		(#{memUid}, (SELECT
		               		mctg_uid
		          	 	FROM
                    		tbl_mCategory
                  	 	WHERE
                     		mctg_name = #{favor})
						)
	</insert>


	<delete id="delMemberFavor">
	DELETE FROM
		tbl_mFavor
	WHERE
		mf_ref = #{socialMemUid}
	</delete>

	<select id = "getMemFavor" resultType="String">
    SELECT
        MCTG_NAME
    FROM
        tbl_mcategory
    WHERE
        MCTG_UID IN (SELECT
                       MF_TYPE
                    FROM
                       tbl_mfavor
                    WHERE
                       MF_REF = #{member}
                    )
   </select>


	<select id = "modMemberInfoGET" resultType="MemberDTO">
	SELECT
		mem_nick AS "mem_nick", mem_profile AS "mem_profile", mem_introduce AS "mem_introduce"
	FROM
		tbl_MemInfo
	WHERE
		mem_iuid = #{encodedAesUid}
	</select>

	<update id="modMemberInfoPOST_MemInfo">
	UPDATE
		tbl_MemInfo
	SET
		mem_nick = #{memberDTO.mem_nick}, mem_profile = #{memberDTO.mem_profile}, mem_introduce = #{memberDTO.mem_introduce}
	WHERE
		mem_iuid = #{memUid}
	</update>

	<update id="modPwdForEmailUser">
	UPDATE
		tbl_EMember
	SET
		em_pwd = #{encodedPwd}
	WHERE
		em_ref = #{encodedUid}
	</update>

	<select id="getMemInfoSession" resultType="MemberDTO">
	SELECT
		*
	FROM
		tbl_MemInfo
	WHERE
	 	mem_iuid = #{socialMemUid}
	</select>

	<select id="getMemProfile" resultType="String">
	SELECT
		mem_profile
	FROM
		tbl_MemInfo
	WHERE
		mem_iuid = #{memUid}
	</select>

	<select id="getUserInfo" resultType="MemberDTO">
  	SELECT
  		mem_nick, mem_profile, mem_introduce
	FROM
		tbl_meminfo
	WHERE
		mem_iuid = #{memUid}
	</select>

	<select id="getCategory" resultType="java.util.Map">
	SELECT
	    mctg_name, mctg_img
	from
		tbl_mcategory
	</select>

	<select id="getBookmarkUploadDate" resultType="java.util.Date">
	SELECT
		bp_date
	FROM
		tbl_blpath
	WHERE
		bp_iuid = #{memUid}
	</select>

	<update id="changePwd">
	UPDATE
		tbl_EMember
	SET
		em_pwd = #{memPwd}
	WHERE
		em_ref = #{memUid}
	</update>

    <insert id="insertWhetherRegInfo">

        insert into tbl_regtoken values (#{memUid}, sysdate)

    </insert>

    <delete id="deleteWhetherRegInfo">

        delete from tbl_regtoken where rt_ref = #{memUid}

    </delete>


    <select id="getWhetherRegInfo" resultType="java.lang.Integer">

        select count(*) from tbl_regtoken where rt_ref = #{memUid}

    </select>
</mapper>














