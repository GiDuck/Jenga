<?xml version="1.0" encoding="UTF-8"?>
		<!DOCTYPE mapper
				PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
				"http://mybatis.org/dtd/mybatis-3-mapper.dtd">		<!-- MyBatis의 경우 작성된 XML Mapper는 상단의 파일에서 사용하는 태그들에 대한 정보가 기록된 DTD를 추가 -->

<mapper namespace="board">





<update id="addReadCount">
		UPDATE
			tbl_blockReadCount
		SET
			blrc_count = blrc_count + 1
		WHERE
			blrc_ref = #{bl_uid}
	</update>


<resultMap id="boardMap" type="HashMap">

	<result property="bl_writer" column="bl_writer"/>
	<result property="bl_title" column="bl_title"/>
	<result property="bl_description" column="bl_description" jdbcType="CLOB" javaType="java.lang.String"/>
	<result property="bl_introduce" column="bl_introduce"/>
	<result property="bti_url" column="bti_url"/>
	<result property="bl_mainCtg" column="bl_mainCtg"/>
	<result property="bl_smCtg" column="bl_smCtg"/>
	<result property="bl_date" column="bl_date" javaType="java.lang.Long"/>
	<result property="bl_objId" column="bl_objId"/>
	<result property="blrc_count" column="blrc_count" javaType="java.lang.Long"/>


</resultMap>

<resultMap id="infoMap" type="HashMap">
	<result property="MEM_NICK" column="MEM_NICK"/>
	<result property="MEM_LEVEL" column="MEM_LEVEL"/>
	<result property="MEM_PROFILE" column="MEM_PROFILE"/>
	<result property="BTI_URL" column="BTI_URL"/>
	<result property="BL_LIKE" column="BL_LIKE"/>
</resultMap>

<select id="getBoardDetailBlock" resultType="Map" resultMap="boardMap">
		SELECT
			B.bl_writer AS "bl_writer", B.bl_title AS "bl_title", B.bl_description AS "bl_description", B.bl_introduce AS "bl_introduce", B.bl_mainCtg AS "bl_mainCtg", B.bl_smCtg AS "bl_smCtg", B.bl_date AS "bl_date", B.bl_objId AS "bl_objId",
			I.bti_url AS "bti_url", R.blrc_count AS "blrc_count", M.mem_nick AS "mem_nick", M.mem_introduce AS "mem_introduce", M.mem_profile AS "mem_profile"
		FROM
			tbl_block B
			INNER JOIN
				tbl_thumbImg I
			ON
				I.bti_ref = B.bl_uid
			INNER JOIN
				tbl_blockReadCount R
			ON
				R.blrc_ref = B.bl_uid
			INNER JOIN
				tbl_memInfo M
			ON
				M.mem_iuid = B.bl_writer
		WHERE
			B.bl_uid = #{bl_uid} AND R.blrc_ref = #{bl_uid} AND M.mem_iuid = B.bl_writer
	</select>

<select id="getBoardDetailTags" resultType="String">
		SELECT
			bt_name
		FROM
			tbl_blockTags
		WHERE
			bt_ref = #{bl_uid}
	</select>

<insert id="writeViewBlock">
		INSERT INTO
    		tbl_block
				(bl_uid, bl_writer, bl_title, bl_introduce, bl_description, bl_mainCtg, bl_smCtg, bl_date, bl_objId)
		VALUES
				(#{bl_uid}, #{bl_writer}, #{bl_title}, #{bl_introduce}, #{bl_description}, #{bl_mainCtg}, #{bl_smCtg}, #{bl_date}, #{bl_objId})
	</insert>

<insert id="writeViewThumbImg">
		INSERT INTO
			tbl_thumbImg
				(bti_ref, bti_url)
		VALUES
				(#{bl_uid}, #{uploadName})
	</insert>

<insert id="writeViewTag">
		INSERT INTO
			tbl_blockTags
				(bt_ref, bt_name)
		VALUES
				(#{bl_uid}, #{tag})
	</insert>
<!-- 조회수 테이블 초기화 -->
<insert id="writeViewReadCount">
		INSERT INTO
			tbl_blockReadCount
				(blrc_ref)
		VALUES
				(#{bl_uid})
	</insert>

<!-- 좋아요 체크 -->
<select id="likeCheck" resultType="String">
		SELECT
			blk_writer
		from
			tbl_blocklikes
		where
			blk_ref = #{bl_iuid} and blk_writer = #{session_mem_iuid}

	</select>

<!-- 좋아요 증가 -->
<insert id="addLike">
		INSERT INTO
			tbl_blockLikes
				(blk_ref)
        VALUES
				(#{bl_uid})
	</insert>

<!-- 좋아요 취소 -->
<delete id="cancelLike">
        DELETE FROM
            tbl_blockLikes
        WHERE
            blrc_ref = #{bl_uid}
    </delete>

<!-- 좋아요 카운트-->

<select id="getModifyBlock" resultType="Map">
		SELECT
			B.bl_writer AS "bl_writer", B.bl_title AS "bl_title", B.bl_description AS "bl_description",  B.bl_introduce AS "bl_introduce", B.bl_mainCtg AS "bl_mainCtg", B.bl_smCtg AS "bl_smCtg", B.bl_objId AS "bl_objId",
			I.bti_url AS "bti_url"
		FROM
			tbl_block B
			INNER JOIN
				tbl_thumbImg I
			ON
				I.bti_ref = B.bl_uid
		WHERE
			B.bl_uid = #{bl_uid}
	</select>

<select id="getUploadName" resultType="String">
		SELECT
			bti_url
		FROM
			tbl_thumbImg
		WHERE
			bti_ref = #{bl_uid}
	</select>

<update id="modifyViewBoard">
		UPDATE
			tbl_block
		SET
			(bl_writer = #{bl_writer}, bl_title = #{bl_title}, bl_description = #{bl_description}, bl_mainCtg = #{bl_mainCtg}, bl_smCtg = #{bl_smCtg}, bl_date = #{bl_date}, bl_objId = #{bl_objId})
		WHERE
			bl_uid = #{bl_uid}
	</update>

<update id="modifyViewThumbImg">
		UPDATE
			tbl_thumbImg
		SET
			bti_url = #{uploadName}
		WHERE
			bti_ref = #{bl_uid}
	</update>

<update id="modifyViewTag">
		UPDATE
			tbl_blockTags
		SET
			bt_name = #{tag}
		WHERE
			bt_ref = #{bl_uid}
	</update>

<select id="checkBmksPath" resultType="String">
		SELECT
			bp_path
		FROM
			tbl_blpath
		WHERE
			bp_iuid = #{session_iuid}
	</select>

<insert id="insertBmksPath">
		INSERT INTO
			tbl_blpath
			(bp_iuid, bp_path, bp_date, bp_browstype, bp_booktype)
		VALUES
			(#{session_iuid}, #{blockPathDTO.bp_path}, sysdate, #{blockPathDTO.bp_browstype}, #{blockPathDTO.bp_booktype})
	</insert>

<update id="updateBmksPath">
		UPDATE
			tbl_blpath
		SET
			bp_path = #{blockPathDTO.bp_path}, bp_date = sysdate, bp_browstype = #{blockPathDTO.bp_browstype}, bp_booktype = #{blockPathDTO.bp_booktype}
		WHERE
			bp_iuid = #{session_iuid}
	</update>

<select id="getBookMarkFromHTML" resultType="String">
		SELECT
			bp_path
		FROM
			tbl_blpath
		WHERE
			bp_iuid = #{session_iuid}
	</select>

<delete id="deleteBlock">
		DELETE FROM
			tbl_block
		WHERE
			bl_uid = #{bl_uid}
	</delete>

<select id="mCtgAllUids" resultType="String">
		SELECT
			mctg_uid
		FROM
			tbl_mCategory
	</select>

<select id="mCtgAllNames" resultType="String">
		SELECT
			mctg_name
		FROM
			tbl_mCategory
		WHERE
			mctg_uid = #{uid}
	</select>

<select id="sCtgAllNames" resultType="String">
		SELECT
			sctg_name
		FROM
			tbl_sCategory
		WHERE
			sctg_ref = #{uid}
	</select>

<select id="sctgUID" resultType="String">
		SELECT
			SCTG_UID
		FROM
		    tbl_SCATEGORY
		WHERE
		    SCTG_NAME = #{bl_smCtg}
	</select>

<select id="searchTitle" resultType="hi.im.jenga.board.dto.BoardDTO" parameterType="java.util.List">

	SELECT
	*
	FROM
	tbl_block
	where
	<foreach collection="list" item="search" separator="or">
		bl_title Like '%'||#{search}||'%'
	</foreach>
</select>


<select id="mctgUID" resultType="String">
		SELECT
			MCTG_UID
		FROM
		    tbl_MCATEGORY
		WHERE
		    MCTG_NAME = #{bl_smCtg}
	</select>

<select id="searchName" resultType="hi.im.jenga.board.dto.BoardDTO" parameterType="java.util.HashMap">
		SELECT
			*
		FROM
			tbl_block
		where
				BL_WRITER = (SELECT
				MEM_IUID
				FROM
				TBL_MEMINFO
				WHERE
				MEM_NICK LIKE '%'||#{search}||'%'
				)
	</select>

<select id="searchTag" resultType="hi.im.jenga.board.dto.BoardDTO">
		select distinct
		 	*
		from
		 	tbl_block b
		 	 	inner join
		 	 	 	tbl_blocktags bt
		 	 	on
		 	 	 	b.bl_uid = bt.bt_ref
        where
         	bt.BT_NAME = #{search}

	</select>

<insert id="setSearchKeyword">
		INSERT INTO
			 tbl_keyword
		values
		     (#{search},#{session_iuid},systimestamp)
	</insert>

	<insert id="follow">
		INSERT INTO
			tbl_follow
		VALUES
		 	(#{bl_writer}, #{session_iuid})
	</insert>

	<select id="followCheck" resultType="String">
		SELECT
			*
		FROM
			TBL_FOLLOW
		WHERE
			FL_IUID = #{bl_writer} and fl_follower = #{session_iuid}
	</select>

<delete id="unFollow">
		DELETE FROM
			tbl_follow
		WHERE
			FL_IUID = #{bl_writer} and FL_FOLLOWER = #{session_iuid}
	</delete>

<select id="getFollowerBoard" resultType="hi.im.jenga.board.dto.BoardDTO">
			select
				*
			from
			 	tbl_block
			where
			 	bl_writer = (select
			 		 			fl_iuid
			 		 		 from
			 		 		  	tbl_follow
			 		 		 where
			 		 		 	fl_follower = #{my_iuid})
			 		 		 ORDER by
			 		 		     BL_WRITER
			 		 		 DESC;
	</select>


<!-- 좋아요 갯수 -->
<select id="likeCount" resultType="int">
		SELECT
			COUNT(*)
		FROM
			tbl_blockLikes
		where
			 blk_ref = #{bl_iuid}
	</select>


<!-- 내 블록 가져오기-->
<select id="getMyBlock" resultType="hi.im.jenga.board.dto.BoardDTO">
		SELECT
			*
		FROM
			TBL_BLOCK
		WHERE
			BL_WRITER = #{my_iuid}
	</select>

<!-- 인기 블록 뽑기 -->
<select id="getPopBlock" resultType="hi.im.jenga.board.dto.BoardDTO">
		select
		 	 b.BL_TITLE,b.BL_INTRODUCE,b.BL_UID,b.BL_mainctg,b.BL_SMCTG,th.bti_url,b.bl_date,bl.bl_like,rc.BLRC_COUNT,mi.MEM_PROFILE,mi.MEM_NICK
		from
			 tbl_block b
		inner join
		 	 (select
		 	  		BLK_REF, count(*) bl_like
		 	  from
		 	   		tbl_blocklikes
		 	  group by
		 	  		(blk_ref)
		 	  Having
		 	   		count(*) > 1) bl
		 	  on
		 	   		b.BL_UID = bl.blk_REF
		 	  			inner join
		 	   					tbl_THUMBIMG th
		 	 			on
		 	   					b.BL_UID = th.bti_ref
		 	   					 		inner join
		 	   					 		 		tbl_blockreadcount rc
		 	   					 		on
		 	   					 		 		b.BL_UID = rc.BLRC_REF
		 	   					 		 		 		inner join
		 	   					 		 		 		 		tbl_meminfo mi
		 	   					 		 		 		on
		 	   					 		 		 		 		b.BL_WRITER = mi.MEM_IUID
	</select>


<!-- 내가 좋아요한 board 뽑기 -->
<select id="">
		select
		 		b.BL_DATE,b.BL_DESCRIPTION,b.BL_INTRODUCE,b.BL_MAINCTG,b.BL_OBJID,b.BL_SMCTG,b.BL_TITLE,b.BL_UID,b.bl_writer
		from
		 		tbl_blocklikes bl
		inner join
		 		tbl_block b
		 		 	on
		 		 	 	bl.BLK_REF = b.bl_uid
		where
		 	bl.blk_writer = #{my_iuid}

	</select>

<select id="searchImgTitle" resultType="Map" resultMap="infoMap" parameterType="java.util.List">
	SELECT
	m.MEM_NICK,m.MEM_LEVEL,m.MEM_PROFILE, t.BTI_URL,NVL(bl.bl_like,0) as bl_like
	FROM
	tbl_block b
	inner join
	tbl_thumbimg t
	on
	b.bl_uid = t.bti_ref
	inner join
	TBL_MEMINFO m
	on
	b.BL_WRITER = m.MEM_IUID
	left outer join
	(select blk_ref, count(*) bl_like from
	tbl_blockLikes group by blk_ref) bl
	on b.bl_uid = bl.blk_ref
	where
	<foreach collection="list" item="search" separator="or">
		bl_title Like '%'||#{search}||'%'
	</foreach>
</select>

<select id="searchImgName" resultType="Map" resultMap="infoMap">
		select
			m.MEM_NICK,m.MEM_LEVEL,m.MEM_PROFILE, t.BTI_URL,NVL(bl.bl_like,0) as bl_like
		from
			tbl_block b
				inner join
					tbl_thumbimg t
				on
					b.bl_uid = t.bti_ref
                    inner join
                    tbl_meminfo m
                    on
                    b.BL_WRITER = m.MEM_IUID
                    left outer join
                     (select blk_ref, count(*) bl_like from
                     tbl_blockLikes group by blk_ref) bl
                        on b.bl_uid = bl.blk_ref
				where
					b.bl_writer = (SELECT
										mem_iuid
								   FROM
								   		tbl_meminfo
								   where
								   		mem_nick = #{search}
								   )
	</select>

<select id="searchImgTag" resultType="Map" resultMap="infoMap">
		SELECT
		m.MEM_NICK,m.MEM_LEVEL,m.MEM_PROFILE, t.BTI_URL,NVL(bl.bl_like,0) as bl_like
		FROM
		tbl_block b
			inner join
				tbl_thumbimg t
			on
			 	b.bl_uid = t.bti_ref
                inner join
                    TBL_BLOCKTAGS bt
                    on
                        b.bl_uid = bt.bt_ref
                inner join
                TBL_MEMINFO m
                on
                b.BL_WRITER = m.MEM_IUID
                left outer join
                     (select blk_ref, count(*) bl_like from
                     tbl_blockLikes group by blk_ref) bl
                        on b.bl_uid = bl.blk_ref
		where
            bt.BT_NAME = #{search}
	</select>

</mapper>














